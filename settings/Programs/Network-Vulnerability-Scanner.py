import sys
import nmap
from colorama import Fore, Style, init
from datetime import datetime

def print_banner():
    banner = f"""
{Fore.BLUE}╔═══════════════════════════════════════════════════════════════════════════╗
║                                                                           ║
║   ███╗   ██╗███████╗████████╗ ██████╗ ██████╗ ███████╗ ██████╗ █████╗   ║
║   ████╗  ██║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗██╔════╝██╔════╝██╔══██╗  ║
║   ██╔██╗ ██║█████╗     ██║   ██║   ██║██████╔╝███████╗██║     ███████║  ║
║   ██║╚██╗██║██╔══╝     ██║   ██║   ██║██╔══██╗╚════██║██║     ██╔══██║  ║
║   ██║ ╚████║███████╗   ██║   ╚██████╔╝██║  ██║███████║╚██████╗██║  ██║  ║
║   ╚═╝  ╚═══╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝  ║
║                                                                           ║
║                     Scanner de Vulnérabilités Réseau                      ║
║                                                                           ║
╚═══════════════════════════════════════════════════════════════════════════╝{Style.RESET_ALL}
"""
    print(banner)

def print_section(title):
    print(f"\n{Fore.CYAN}[+] {title}{Style.RESET_ALL}")

def print_info(message):
    print(f"{Fore.GREEN}[*] {message}{Style.RESET_ALL}")

def print_warning(message):
    print(f"{Fore.YELLOW}[!] {message}{Style.RESET_ALL}")

def print_error(message):
    print(f"{Fore.RED}[-] {message}{Style.RESET_ALL}")

def scan_network(target):
    try:
        print_section("Démarrage du scan réseau")
        print_info(f"Cible: {target}")
        print_info(f"Heure de début: {datetime.now().strftime('%H:%M:%S')}")

        scanner = nmap.PortScanner()
        scanner.scan(target, arguments='-sV -sC -O --script vuln')

        for host in scanner.all_hosts():
            print_section(f"Résultats pour l'hôte {host}")
            
            host_state = scanner[host].state()
            print_info(f"État: {host_state}")
            if 'osmatch' in scanner[host]:
                for os in scanner[host]['osmatch']:
                    print_info(f"OS détecté: {os['name']} (Précision: {os['accuracy']}%)")

            for proto in scanner[host].all_protocols():
                print_section(f"Protocole : {proto}")
                ports = scanner[host][proto].keys()
                
                for port in ports:
                    port_state = scanner[host][proto][port]
                    service = port_state.get('name', 'inconnu')
                    version = port_state.get('version', '')
                    
                    if port_state['state'] == 'open':
                        print_info(f"Port {port}/{proto}: {service} {version}")
                        
                        if 'script' in port_state:
                            for script, result in port_state['script'].items():
                                if 'VULNERABLE' in result:
                                    print_warning(f"Vulnérabilité détectée ({script})")
                                    print(f"{Fore.YELLOW}{result}{Style.RESET_ALL}")

    except Exception as e:
        print_error(f"Erreur lors du scan: {str(e)}")
        return False

    return True

def main():
    init()  
    print_banner()
    
    if len(sys.argv) != 2:
        print_error("Usage: python3 network_scanner.py <cible>")
        print_info("Exemple: python3 network_scanner.py 192.168.1.0/24")
        sys.exit(1)
        
    target = sys.argv[1]
    scan_network(target)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_error("\nScan interrompu par l'utilisateur")
        sys.exit(0)

